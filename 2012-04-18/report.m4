include(`../lib.m4')dnl
header(`1', `105', `プログラミングとデバッグ')dnl

今回用いたプログラムのソースコードを以下に示す。

source(`105-1.c')dnl

quicksort() 関数が、私が新しく実装したクイックソートの関数である。quicksort() 関
数は、ソート全体のうちの残りの計算(継続)を全てスタックに積み、それを順番に取り出
して実行するという方針で実装した。通常の実装方法で再帰呼び出しを使う部分はスタッ
クへの push で実現されており、再帰関数を用いる必要は無い。

このプログラムの実行結果は、以下の通りである。

syscmd(`./105-1')dnl

1-3行目はバブルソートの実行結果である。****回の比較を行っていることが分かる。4行
目以降はクイックソートの実行結果である。****回の比較を行っていることが分かる。

次に、実際の速度の比較について述べる。バブルソートもクイックソートも同様の条件で
実行するため、入力に用いる長さ100000のランダムな配列データを array というファイ
ルに書き込み、#include ディレクティブを用いて読み込むこととした。

バブルソートの実行時間の計測には、以下のソースコードを用いた。

source(`105-2.c')dnl

クイックソートの実行時間の計測には、以下のソースコードを用いた。

source(`105-3.c')dnl

array というファイルは、以下のスクリプトで生成した。

source(`genarray')dnl

コンパイラは、Debian sid (amd64) 環境のパッケージ管理システムでインストール可能
な gcc 4.6.3 を用いた。コンパイラのオプションとしては -O2 を与えた。

計測結果は以下の通りであった。

$ /usr/bin/time -v ./bubblesort
syscmd(`/usr/bin/time -v ./105-2 2>&1')dnl
$ /usr/bin/time -v ./quicksort
syscmd(`/usr/bin/time -v ./105-3 2>&1')dnl

実行時間は、それぞれの2行目に示されており、100000要素の配列をソートした場合、バ
ブルソートでは****秒かかり、クイックソートでは****秒かかったことが分かる。今回用
いたクイックソートの実装はバブルソートの実装と比較して高速である。

footer()dnl
